# Day 1 ##
x = 34 - 23
y = "Hello"
z= 3.45
if z ==3.45 or y == "Hello":
    x= x + 1
    y= y + " World" 
    print (x)
    print (y)


# Day 2 ##

var= 'Panda'
if var == "panda":
    print("cute!")
elif var == "Panda":
    print("regal!")
else:
    print("ugly ...")
    
 
    temp = 120
    if temp > 85:
        print ("Hot")
    elif temp > 100:
        print ("really Hot!")
    elif temp > 60:
        print ("comfortable")
    else:
         print ("cold")
         
str4="Hello, World"
str4[1:8:2]
str4[2:5:3]       
str4[1:9:2]


# Function 
def triple(num):
    print("starting to execute the function body.")
    return num*3
    print("Is this line executed!")
    
    triple(5)

# Question 1
# Make a function that takes a number and squares it

def squares(x):
    return x*x

squares(10)


# Question 2
# Make a function that takes a number and returns it as a string

def to_string(number):
    return str(number)

to_string(42)


# Question 3
# Create a function that takes two numbers, and switches their values

def switch_f(x,y):
    # swithes the place of x and y
    # example if xy it returns yx
    print(y,x)
 
    switch_f(5, 6)
    
# Question 4
# Take two words and sorts them alphabetically

def sort_f(word1, word2):
    if word1[0] < word2[0]:
        print (word1)
    else:
        print (word2)
        
sort_f("kati", "leanna")

# Question 5
# Take a word and return only the last letter


def last_f(word):
    print (word[-1])
    
last_f("kati")    


# Question 6
# Make a function that takes in a food, and prints "I like" food

def my_food(food):
    print("I like " + food + "!")
    
my_food('fish')

# Question 7
# Make a function that takes a string, and returns the first character

def first_char(x):
    return x[0]

first_char('pizza')


# Question 8
# Make a function that that takes two numbers and adds them, subtracts, them
# and multiplies them

def lots_of_things(x,y):
    return (x+y, x-y, x*y)

lots_of_things(1,3)


# Question 9
# Make a function that takes two numbers and returns the remainder of
# number a divide by number b

def remainder_f(a,b):
    return a%b

remainder_f(10, 3)






# type() function

x=None
type(x)
x==None

# OR AND

A=True
B=True
C=False
D=False

print(A&B)
print(A&C)
print(C&D)

print(A | B)
print(A | C)
print(C | D)

print(A != B)
print(A != C)
print(C != D)

print(A ^ B)




x= ("This is a right way, right?")
# finding string position
x.find('right', 0, len(x))
x[x.find('right', 0, len(x))]

#lower(), toupper(), capitalize()
x.count("This")
x.count("right")

x.lower()
x.upper()
x.replace("right", "correct")
x.split(" ")
x.split(",")
'|'.join(x)
len(x. split(" "))


'life of bryan' [:5]
'life of bryan' [5:]

# Quote
A= "This is 'Milk'"
B= 'This is "Milk"'
C= "This is \"Milk\""
print(A)
print(B)
print(C)

A="I want a linebreak \nbefore I continue."
print(A)
print ("What does \rdo?")

print("Answe (a), \ranswer(b), answer(c)")
# tab
print ('I want a tab\there')
print ('I want a \\there')


# Dealing with time
from datetime import datetime, date, time, timedelta 
my_date=datetime(1999, 12, 31, 11, 59, 50)
type(my_date)
print(my_date)

my_date.year
my_date.month
my_date.day
my_date.hour
my_date.minute
my_date.second

datetime.today()
yet_another=datetime(2019, 1, 1)

dtm='20130507@161218'
dtm2='20130507@161218'
dtm=datetime.strftime(dtm, "%Y%m%d@%H%M%S")
print(dtm)
print(type(dtm))
dtm2=dtm2.strftime("%m/%d/%Y %H:%M") 

print(dtm2)
print(type(dtm2))

# just the date no time
d0=datetime.strptime("25,08,2013+16,11,01", "%d,%m,%Y+%H,%M,%S")
d0=datetime.strptime("2508:2013/16,11,01", "%d%m:%Y/%H,%M,%S")
d=d0.date()
print(d)
t=d0.time()
print(t)
print(t.hour)

d1=datetime.date(2016, 2, 28)
d2=datetime.date(2018, 5, 8)
d3=d2-d1
print(d3)
print(type(d3))
#d3.year
#d3.month
#d3.day

datetime.timedelta(5)
d1-d2
datetime.timedelta(0,3600)


t=(2,3,'eee')
print(type(t))

my_tuple=(1,3,5)
my_tuple[1]=5
print(my_tuple[1])
other_t=('abc', 1, (2,1), 3.0)
print(other_t[0][1])
log_t=my_tuple+other_t
print(log_t)
print(len(log_t))


t=1,2,3,4,2,4,1,4,3,2,1
t.count(1)


# List

mylist=[]
mylist.append(1)
mylist.append(2)
mylist[1]
print(dir(list()))  
mylist[1]=3
print(mylist)
mylist[0]
mylist[10]

# list of list

random_stuff=[True, 3.14, ["Pie", "Pizza", "Automobile"]]
battleship_board=[[1,1,0],[1,0,1],[0,0,1]]
print(random_stuff[2])



# Day 3 ##


mymessydate = '2018:20:06:15:30:10'
d1=datetime.strptime(mymessydate, "%Y:%d:%m:%H:%M:%S")
d1
mymessydate1 = '980820061530AM'
d2=datetime.strptime(mymessydate1, "%y%m%d%H%M%S%p")
d2
mymessydate2 = '1984,10, 09+104510PM'
d3=datetime.strptime(mymessydate2, "%Y,%d, %m+%I%M%S%p")
d3


my_list = ['green', 'red', 'blue']
another_list = my_list
my_list[0] = 'yellow'
my_list.append('purple')
my_list.insert (2, 'white')
# For insert first put the index, append attach to the end


#sort()
unordered_list = [1123, 15, 25, 500]
unordered_list.sort()
unordered_list.sort(reverse = True)


# Loop

new_list = ["Pie", "Pizza", "Spagetti", "Rice", "Kebab"]
if "Kebab" in new_list:
    print ('I am hungry')
    
for char in "hello world!":
    print (char)   
    
for i in new_list:
    print (len(i))
    
    
a=list(range(1, 10))
a
print (a) 

# Question: get a new number and return the new count
a=[5, 6, 7, 14, 10, 25]
len=len(a)
total=sum(a)
total    
a.append(30)


count=0
for i in a:
    print ("My count is:", count)
    count=count+i
    print("new count", count)
    
i=0
while i < len(a):
    print (a[i])
    i=i+3
    
# Question: a while loop that adds up to 1650 
loop_list = [1123, 5, 23, 527, 24, 10, 2]
i=0
add = loop_list[i]
while add < 1650:
     add = add + loop_list[i+1]
     i=i+1
if add >= 1650:
     add = add - loop_list[i]
     







# Dictionary
my_dic= {'name': 'kati', 'country': 'canada', 'job':'student', 'language':['english', 'farsi', 'french']}
my_dic
my_dic.keys()
my_dic.values()
list(my_dic.keys())
keyed=my_dic.keys()
my_dic['phone']=6478308228   # add new element in the Dic
my_dic.get('name')
my_dic.get('language')
my_dic['country']='Iran'
my_dic['height']=172
my_dic.pop('height') # To delete an element from Dic


## Day 4 ##

myloop1=[2, 4, 6, 8, 10, "Goodbye!"]
i=0
while i< len(myloop1):
    print (myloop1[i])
    i=i+1
    

for val in myloop1:
     print (val)
    
   
myloop2=["Hello", 10, 8, 6, 4, 2]
i=0
while i< len(myloop2):
    print (myloop2[i])
    i=i+1 
    
for val in myloop2:
     print (val)   


end=6
add=0
for i in range(end+1):
    add=add+i
    print (add)    
    
list(range(end+1))


end=6
add=0
while i < end+1:
    add=add+i
    print (add)    
    


s="I love my daugthers and miss them when they are at daycare"
vowels=["a", "e" ,"i", "o", "u", "A", "E", "I", "O", "U"]
len(s)
vowelcount=0
for i in s:
    if(i=='a' or i=='e' or i=='i' or i=='o' or i=='u' or i=='A' or i=='E' or i=='I' or i=='O' or i=='U'):
            vowelcount=vowelcount+1
            print("Number of vowels are:")
            print(vowelcount)
        

     
s="I love ice cream, I love cake, I love chocolate"
s_l=s.split(" ")
s_l

i=0
wordcount=0
for i in s_l:
    if(i=='love'):
        wordcount=wordcount+1
print("Number of word is:")
print(wordcount)


# Page 99
def out(a):
    a=a+1
    def inside (x):
        return (x+1)
    a=inside(a)
    return(a)
out(30)    




# Chapter 7 - Numpy
import numpy as np

x=np.array([0,1,2,3])
no_good=np.array(['pie', 3.14])
no_good[1]

w=np.array([[0,1,2,3], [4,5,6,7]])
w

y = np.arange(8).reshape(2, 4)
y

one_np=np.ones((3,4), dtype=int)
# a 3 x 4 matrix of 1

one_np=np.ones((10,2), dtype=int)
# a 2 x 10 matrix of 1

zero_np=np.zeros((5,2), dtype=float)
# a 5 x 2 matrix of 0

zero_np=np.zeros((3,4), dtype=float)

empty_np=np.empty((2,2))
# generates number betwween 0 to 1 randomely

full_np=np.full((2,2), 7)
# a 2 x 2 matrix of 7

range_np=np.arange(0,10,2)
# array of 0 to 10 jump over 2

x=np.arange(0.6, 5.2, 1.8)
np.savetxt('test.out', x, delimiter=',')

print(one_np+zero_np)



a_array=np.full((2,2), 5)
a_array.shape
another_array=np.array([[3,9], [27, 81]])
b_array=np.array([1,2])
print(a_array + b_array)
a_array
b_array
print(a_array + 5)
a_array.sum()
w.min()
w.max()
w[1]

w[1][1] # or w[1,1]
w[0:2, 0] # First column
w[:,1]

w.flatten()
w.ravel()


# Question 1
D1=np.array([0, 2, 3, 1, 5, 6, 8, 11, 10, 1, 7, 6])
D2=D1.reshape(3, 4)

# Question 2
m1=np.arange(2,11,1)
m1.reshape(3,3)

# Question 3 
m2=np.arange(12,38,1)
m2

# Question 4- Reverse the array
m3=np.sort(m2)[::-1] 
m3

#Question 5
D3=np.append(D1, 55)
D3


N=np.array([4, 4, 4])
D4=np.append(D2, N)
D4
D4=D4.reshape(3, 5)

# read an external file


np.savetxt('pppp.csv', D2, delimiter=',')
import os
os.chdir('C:\\Users\\Administrator\\Desktop\\Python')
os.getcwd()


my_data=np.genfromtxt('PPP.csv', delimiter=',', skip_header=1)
my_data


r=([0,1]*4 + [1,0]*4 )*4
x=np.array(r).reshape(8,8)

t1=np.array([1,0])


## Day 5 ##

import numpy as np
import pandas as pd
import matplotlib.pylab as plt
import seaborn as sns

my_array = np.array([10,11,12,13,14])
my_series = pd.Series([10,11,12,13,14], index = ['time1', 'time2', 'time3', 'time4', 'time5'])
my_series


my_dict = {'country':'canada', 'language':'english', 'size':'large'}
my_series2 = pd.Series(my_dict)
my_series2

my_dict = {'country':['canada', 'US', 'UK'], 'language':['english', 'english', 'english'], 'size':['large', 'medium', 'small']}
my_series3 = pd.Series(my_dict)
my_series3

import os
os.chdir("C:/Users/Administrator/Desktop/Python")

baseball = pd.read_csv('baseball.csv')
baseball.head()
baseball.tail(3)
baseball.columns
baseball.describe()
baseball['losses'] = round((baseball.G - baseball.W),0)
baseball.iloc[0:5, :3] # iloc works with number of columns and rows
baseball.loc[0:10:2, ['Team', 'League']] # loc works with the name of columns
baseball.loc[0:10:2] # same as baseball.loc[0:10:2, :]
# every oder rows because of 2
baseball.sort_values(by= 'Year')
baseball.sort_values(by= 'Year', ascending=False)[:5]

baseball.loc[baseball.Team == "TOR" , 'Team' : 'W']
baseball.loc[baseball.Team == "TOR" , 'Team' : 'W'].sort_values(by='Year', ascending=False)


baseball.loc[(baseball.Team == "TOR") & (baseball.Year > 2010), 'Team' : 'W']

baseball.loc[(baseball.Team == "TOR") | (baseball.Year > 2010), 'Team' : 'W']
baseball.count() #To know where we have missing values


names = ['Kati', 'Rayan', 'Leanna', 'Meloryna']
country = ['Iran', 'Iran', 'Canada', 'Canada']
year = [1978, 1976, 2016 , 2018]
color= ['White', 'Blue', 'Pink', 'Red']

mydata=pd.DataFrame([country, year, color, names])
mydata

